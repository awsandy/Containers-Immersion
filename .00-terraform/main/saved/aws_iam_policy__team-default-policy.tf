#Â File generated by aws2tf see https://github.com/aws-samples/aws2tf
# aws_iam_policy.team-default-policy:
resource "aws_iam_policy" "team-default-policy" {
  description = "team default policy"
  name        = "team-default-policy"
  path        = "/"
  policy = jsonencode(
    {
      Statement = [
        {
          Action = [
            "iam:List*",
            "iam:Get*",
            "iam:Generate*",
            "sts:GetCallerIdentity",
          ]
          Effect     = "Allow"
          "Resource" = "*"
          Sid        = "AllowIAMRO"
        },
        {
          Action     = "iam:CreateServiceLinkedRole"
          Effect     = "Allow"
          "Resource" = "arn:aws:iam::*:role/aws-service-role/*"
        },
        {
          Action = [
            "iam:PassRole",
          ]
          Effect   = "Allow"
          Resource = aws_iam_role.TeamRole.arn
        },
        {
          Action = [
            "route53domains:*",
            "ec2:ModifyReservedInstances",
            "ec2:PurchaseHostReservation",
            "ec2:PurchaseReservedInstancesOffering",
            "ec2:PurchaseScheduledInstances",
            "rds:PurchaseReservedDBInstancesOffering",
            "dynamodb:PurchaseReservedCapacityOfferings",
            "s3:PutObjectRetention",
            "s3:PutObjectLegalHold",
            "s3:BypassGovernanceRetention",
            "s3:PutBucketObjectLockConfiguration",
          ]
          Effect     = "Deny"
          "Resource" = "*"
          Sid        = "DenyBlocklist"
        },
        {
          Condition = {
            StringNotEquals = {
              "aws:RequestedRegion" = [
                "eu-west-1",
                "us-east-1",
              ]
            }
          }
          Effect = "Deny"
          NotAction = [
            "iam:*",
            "sts:*",
            "s3:*",
            "ds:*",
            "artifact:Get",
            "artifact:DownloadAgreement",
            "lightsail:*",
            "braket:*",
            "quicksight:*",
            "cloudfront:*",
            "route53:*",
            "servicediscovery:*",
            "waf:*",
            "waf-regional:*",
            "wafv2:*",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:GetMetricStatistics",
            "ec2:Describe*",
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "ecr:BatchCheckLayerAvailability",
            "ecr:GetAuthorizationToken",
            "globalaccelerator:*",
            "acm:List*",
            "acm:Describe*",
            "kms:Describe*",
            "kms:ReEncrypt*",
            "kms:GenerateDataKey*",
            "kms:Get*",
            "kms:List*",
            "kms:CreateGrant",
            "kms:RevokeGrant",
            "ssm:List*",
            "directconnect:Describe*",
          ]
          "Resource" = "*"
          Sid        = "DenyAllOutsideAllowedRegions"
        },
      ]
      Version = "2012-10-17"
    }
  )
  tags     = {}
  tags_all = {}
}
